pipeline {
    agent any
    
    environment {
        // Docker Configuration
        DOCKER_IMAGE_NAME = 'ashmit/swayatt-logo-server'
        DOCKER_REGISTRY = 'docker.io'
        
        // AWS Configuration
        AWS_REGION = 'ap-south-1'
        EC2_INSTANCE_ID = credentials('aws-ec2-instance-id')
        EC2_HOST = credentials('aws-ec2-host')
        EC2_USER = 'ubuntu'
        
        // Application Configuration
        APP_NAME = 'swayatt-logo-server'
        APP_PORT = '3000'
        CONTAINER_NAME = 'swayatt-app'
        
        // Build Information
        GIT_COMMIT_SHORT = sh(
            script: "git rev-parse --short=8 HEAD",
            returnStdout: true
        ).trim()
        BUILD_TIMESTAMP = sh(
            script: "date +%Y%m%d-%H%M%S",
            returnStdout: true
        ).trim()
    }
    
    triggers {
        // GitHub webhook trigger
        githubPush()
    }
    
    options {
        // Build timeout
        timeout(time: 30, unit: 'MINUTES')
        // Keep last 10 builds
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Skip default checkout
        skipDefaultCheckout(false)
    }
    
    stages {
        stage('Checkout & Setup') {
            steps {
                script {
                    echo "=== Checkout & Setup Stage ==="
                    echo "Branch: ${env.BRANCH_NAME}"
                    echo "Build Number: ${env.BUILD_NUMBER}"
                    echo "Git Commit: ${GIT_COMMIT_SHORT}"
                    
                    // Ensure deployment-proof directory exists
                    sh 'mkdir -p deployment-proof/screenshots'
                    sh 'mkdir -p deployment-proof/logs'
                }
            }
        }
        
        stage('Build & Test') {
            steps {
                script {
                    echo "=== Build & Test Stage ==="
                    dir('app') {
                        // Install dependencies
                        sh 'npm install'
                        
                        // Run tests (if they exist)
                        script {
                            def testResult = sh(
                                script: 'npm test --if-present',
                                returnStatus: true
                            )
                            if (testResult != 0 && fileExists('package.json')) {
                                def packageJson = readJSON file: 'package.json'
                                if (packageJson.scripts && packageJson.scripts.test) {
                                    error('Tests failed!')
                                }
                            }
                            echo "Tests completed successfully"
                        }
                        
                        // Validate application can start
                        sh '''
                            timeout 10s node app.js &
                            PID=$!
                            sleep 5
                            kill $PID || true
                            echo "Application validation successful"
                        '''
                    }
                }
            }
            post {
                always {
                    // Archive build logs
                    sh 'echo "Build completed at $(date)" > deployment-proof/logs/build-log.txt'
                }
            }
        }
        
        stage('Code Quality & Security') {
            parallel {
                stage('Lint Check') {
                    steps {
                        dir('app') {
                            script {
                                echo "=== Code Lint Check ==="
                                // Basic syntax check
                                sh 'node -c app.js'
                                echo "Lint check passed"
                            }
                        }
                    }
                }
                stage('Security Scan') {
                    steps {
                        dir('app') {
                            script {
                                echo "=== Security Scan ==="
                                // Check for known vulnerabilities
                                sh 'npm audit --audit-level=high || echo "Security audit completed with warnings"'
                            }
                        }
                    }
                }
            }
        }
        
        stage('Dockerize') {
            steps {
                script {
                    echo "=== Dockerize Stage ==="
                    
                    // Build Docker image
                    def imageTag = "${BUILD_NUMBER}-${GIT_COMMIT_SHORT}"
                    def imageName = "${DOCKER_IMAGE_NAME}:${imageTag}"
                    def latestImage = "${DOCKER_IMAGE_NAME}:latest"
                    
                    sh """
                        docker build -f cicd/docker/dockerfile -t ${imageName} .
                        docker tag ${imageName} ${latestImage}
                    """
                    
                    // Test the Docker image
                    sh """
                        echo "Testing Docker image..."
                        docker run --rm -d --name test-container -p 3001:3000 ${imageName}
                        sleep 10
                        curl -f http://localhost:3001/ || echo "Container test endpoint check"
                        docker stop test-container || true
                        echo "Docker image test completed"
                    """
                    
                    // Save image info for deployment
                    sh """
                        echo "IMAGE_TAG=${imageTag}" > deployment-proof/image-info.txt
                        echo "IMAGE_NAME=${imageName}" >> deployment-proof/image-info.txt
                        echo "BUILD_TIME=${BUILD_TIMESTAMP}" >> deployment-proof/image-info.txt
                    """
                }
            }
        }
        
        stage('Push to Registry') {
            steps {
                script {
                    echo "=== Push to DockerHub ==="
                    withCredentials([string(
                        credentialsId: 'dockerhub-token',
                        variable: 'DOCKERHUB_TOKEN'
                    ), string(
                        credentialsId: 'dockerhub-username',
                        variable: 'DOCKERHUB_USER'
                    )]) {
                        sh '''
                            # Login to DockerHub using token
                            echo $DOCKERHUB_TOKEN | docker login -u $DOCKERHUB_USER --password-stdin
                            
                            # Push images to DockerHub
                            docker push $DOCKER_IMAGE_NAME:$BUILD_NUMBER-$GIT_COMMIT_SHORT
                            docker push $DOCKER_IMAGE_NAME:latest
                            
                            echo "DockerHub push completed successfully"
                        '''
                    }
                }
            }
        }
        
        stage('Deploy to EC2') {
            when {
                anyOf {
                    branch 'main'
                    branch 'dev'
                }
            }
            steps {
                script {
                    echo "=== Deploy to AWS EC2 ==="
                    
                    def environment = env.BRANCH_NAME == 'main' ? 'prod' : 'dev'
                    def imageTag = "${BUILD_NUMBER}-${GIT_COMMIT_SHORT}"
                    def containerName = "${CONTAINER_NAME}-${environment}"
                    
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'aws-ec2-ssh-key',
                            keyFileVariable: 'SSH_KEY',
                            usernameVariable: 'SSH_USER'
                        ),
                        string(credentialsId: 'dockerhub-token', variable: 'DOCKERHUB_TOKEN'),
                        string(credentialsId: 'dockerhub-username', variable: 'DOCKERHUB_USER')
                    ]) {
                        sh """
                            echo "Deploying to ${environment} environment on EC2..."
                            
                            # SSH to EC2 and deploy
                            ssh -i \$SSH_KEY -o StrictHostKeyChecking=no \$SSH_USER@${EC2_HOST} '
                                # Update system packages
                                sudo apt-get update -y
                                
                                # Install Docker if not present
                                if ! command -v docker &> /dev/null; then
                                    curl -fsSL https://get.docker.com -o get-docker.sh
                                    sudo sh get-docker.sh
                                    sudo usermod -aG docker \$USER
                                fi
                                
                                # Login to DockerHub
                                echo ${DOCKERHUB_TOKEN} | sudo docker login -u ${DOCKERHUB_USER} --password-stdin
                                
                                # Stop and remove existing container
                                sudo docker stop ${containerName} || true
                                sudo docker rm ${containerName} || true
                                
                                # Remove old images
                                sudo docker rmi ${DOCKER_IMAGE_NAME}:latest || true
                                
                                # Pull latest image
                                sudo docker pull ${DOCKER_IMAGE_NAME}:${imageTag}
                                sudo docker tag ${DOCKER_IMAGE_NAME}:${imageTag} ${DOCKER_IMAGE_NAME}:latest
                                
                                # Run new container
                                sudo docker run -d \\
                                    --name ${containerName} \\
                                    --restart unless-stopped \\
                                    -p ${APP_PORT}:3000 \\
                                    -e NODE_ENV=${environment} \\
                                    ${DOCKER_IMAGE_NAME}:latest
                                
                                # Verify container is running
                                sleep 10
                                sudo docker ps | grep ${containerName}
                                
                                # Test application health
                                curl -f http://localhost:${APP_PORT}/ || echo "Health check endpoint test"
                                
                                echo "Deployment to ${environment} completed successfully!"
                            '
                        """
                        
                        // Save deployment info
                        sh """
                            echo "Deployment completed at \$(date)" > deployment-proof/deployment-info.txt
                            echo "Environment: ${environment}" >> deployment-proof/deployment-info.txt
                            echo "EC2 Instance: ${EC2_INSTANCE_ID}" >> deployment-proof/deployment-info.txt
                            echo "Container: ${containerName}" >> deployment-proof/deployment-info.txt
                            echo "Image: ${DOCKER_IMAGE_NAME}:${imageTag}" >> deployment-proof/deployment-info.txt
                            echo "Port: ${APP_PORT}" >> deployment-proof/deployment-info.txt
                        """
                    }
                }
            }
        }
        
        stage('Post-Deploy Validation') {
            when {
                anyOf {
                    branch 'main'
                    branch 'dev'
                }
            }
            steps {
                script {
                    echo "=== Post-Deploy Validation ==="
                    
                    def environment = env.BRANCH_NAME == 'main' ? 'prod' : 'dev'
                    def containerName = "${CONTAINER_NAME}-${environment}"
                    
                    withCredentials([
                        sshUserPrivateKey(
                            credentialsId: 'aws-ec2-ssh-key',
                            keyFileVariable: 'SSH_KEY',
                            usernameVariable: 'SSH_USER'
                        )
                    ]) {
                        sh """
                            echo "Validating deployment on EC2..."
                            
                            # SSH to EC2 and validate
                            ssh -i \$SSH_KEY -o StrictHostKeyChecking=no \$SSH_USER@${EC2_HOST} '
                                # Check container status
                                echo "=== Container Status ==="
                                sudo docker ps | grep ${containerName}
                                
                                # Check container logs
                                echo "=== Container Logs ==="
                                sudo docker logs --tail 20 ${containerName}
                                
                                # Health check
                                echo "=== Health Check ==="
                                curl -f http://localhost:${APP_PORT}/ -o /tmp/health_check.html
                                ls -la /tmp/health_check.html
                                
                                # Container resource usage
                                echo "=== Container Stats ==="
                                sudo docker stats --no-stream ${containerName}
                                
                                echo "Validation completed successfully!"
                            '
                        """
                        
                        // Save validation results
                        sh """
                            echo "Validation completed at \$(date)" > deployment-proof/validation-log.txt
                            echo "Environment: ${environment}" >> deployment-proof/validation-log.txt
                            echo "EC2 Host: ${EC2_HOST}" >> deployment-proof/validation-log.txt
                            echo "Application URL: http://${EC2_HOST}:${APP_PORT}" >> deployment-proof/validation-log.txt
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "=== Pipeline Cleanup ==="
                
                // Archive artifacts
                archiveArtifacts artifacts: 'deployment-proof/**/*', allowEmptyArchive: true
                
                // Clean up Docker images to save space
                sh '''
                    docker system prune -f || true
                    echo "Docker cleanup completed"
                '''
                
                // Generate pipeline summary
                sh """
                    echo "=== Pipeline Summary ===" > deployment-proof/pipeline-summary.txt
                    echo "Build Number: ${BUILD_NUMBER}" >> deployment-proof/pipeline-summary.txt
                    echo "Git Commit: ${GIT_COMMIT_SHORT}" >> deployment-proof/pipeline-summary.txt
                    echo "Branch: ${BRANCH_NAME}" >> deployment-proof/pipeline-summary.txt
                    echo "Timestamp: ${BUILD_TIMESTAMP}" >> deployment-proof/pipeline-summary.txt
                    echo "Status: \${currentBuild.currentResult}" >> deployment-proof/pipeline-summary.txt
                """
            }
        }
        success {
            script {
                echo "=== Pipeline Completed Successfully! ==="
                echo "Build: ${BUILD_NUMBER}"
                echo "Commit: ${GIT_COMMIT_SHORT}"
                echo "Image: ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER}-${GIT_COMMIT_SHORT}"
                
                // Send success notification (can be configured)
                sh 'echo "SUCCESS: Pipeline completed successfully at $(date)" >> deployment-proof/pipeline-summary.txt'
            }
        }
        failure {
            script {
                echo "=== Pipeline Failed! ==="
                echo "Build: ${BUILD_NUMBER}"
                echo "Check logs for details"
                
                // Send failure notification (can be configured)
                sh 'echo "FAILURE: Pipeline failed at $(date)" >> deployment-proof/pipeline-summary.txt'
            }
        }
        unstable {
            script {
                echo "=== Pipeline Unstable ==="
                sh 'echo "UNSTABLE: Pipeline completed with warnings at $(date)" >> deployment-proof/pipeline-summary.txt'
            }
        }
    }
}
